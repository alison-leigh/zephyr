import * as React$1 from 'react';
import * as cva from 'cva';
import { VariantProps } from 'cva';
import * as Primitive from '@radix-ui/react-avatar';
import * as _radix_ui_react_label from '@radix-ui/react-label';
import * as CheckboxPrimitive from '@radix-ui/react-checkbox';
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
import * as PopoverPrimitive from '@radix-ui/react-popover';
import * as ProgressPrimitive from '@radix-ui/react-progress';
import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';
import * as SliderPrimitive from '@radix-ui/react-slider';
import * as SwitchPrimitive from '@radix-ui/react-switch';
import * as TabsPrimitive from '@radix-ui/react-tabs';
import * as TogglePrimitive from '@radix-ui/react-toggle';
import * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group';
import * as TooltipPrimitive from '@radix-ui/react-tooltip';
import plugin from 'tailwindcss/plugin.js';

declare const alertVariants: (props?: ({
    variant?: "inline" | "expanded" | undefined;
    color?: "gray" | "primary" | "info" | "success" | "error" | "warning" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string;

type ClosableProps$1 = {
    /**
     * Is the alert closable? If true, a close icon will be displayed.
     * @default true
     */
    closable: true;
    /**
     * An optional callback function to be called when the close icon is clicked.
     * This can be used to handle the removal of the tag.
     * If provided, the close icon will be displayed.
     */
    onClose?: React$1.MouseEventHandler<HTMLButtonElement>;
};
type NotClosableProps$1 = {
    /**
     * Is the alert closable? If true, a close button will be displayed and
     * when clicked on it will hide the alert element
     * @default true
     */
    closable?: false;
    /**
     * An optional callback function to be called when the close button is clicked.
     * Requires the `closable` prop to be set to `true`.
     */
    onClose?: never;
};
type AlertProps = Omit<React$1.HTMLAttributes<HTMLDivElement>, "title"> & VariantProps<typeof alertVariants> & {
    /**
     * The slot to be rendered before the description.
     * This can be used to render an icon
     * or any other element before the description. Also accepts a string,
     * number, or any valid React element.
     * If the `before` prop is omitted, the default icon will be displayed.
     *
     * @example
     * // Display an alert with icon
     * <Alert before={<SuccessIcon />} />
     */
    before?: React$1.ReactNode;
    /**
     * The slot to be rendered after the description.
     * This can be a string, number or any valid React element.
     * If omitted, it will not be displayed.
     *
     * @example
     * // Display an alert with button
     * <Alert after={<Button size='sm'>Save</Button>} />
     */
    after?: React$1.ReactNode;
    /**
     * The title to display within the Alert component.
     * This can be a string, number or any valid React element.
     * If omitted, no title will be displayed.
     * If a string is provided, it will be wrapped in an <AlertTitle /> component.
     * If a React element is provided, it will be rendered as-is.
     */
    title?: React$1.ReactNode;
} & (ClosableProps$1 | NotClosableProps$1);
declare const AlertWedges: React$1.ForwardRefExoticComponent<AlertProps & React$1.RefAttributes<HTMLDivElement>>;

declare const avatarVariants: (props?: ({
    size?: "xxs" | "xs" | "sm" | "lg" | "xl" | "2xl" | "md" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string;
declare const fallbackVariants: (props?: ({
    size?: "xxs" | "xs" | "sm" | "lg" | "xl" | "2xl" | "md" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string;
declare const statusVariants: (props?: ({
    status?: "gray" | "green" | "red" | "yellow" | "primary" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string;
declare const notificationVariants: (props?: ({
    notification?: "gray" | "green" | "red" | "yellow" | "primary" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string;

type AvatarElement = React$1.ElementRef<typeof Primitive.Image> | HTMLSpanElement;
type AvatarVariantProps = VariantProps<typeof statusVariants> & VariantProps<typeof notificationVariants> & VariantProps<typeof avatarVariants> & VariantProps<typeof fallbackVariants>;
type BaseAvatarProps = {
    /**
     * Represents the initials displayed on the Avatar.
     *
     * - Supports single characters, two characters, or full words.
     * - For full words, initials will be derived from the first letter of the
     *   first word and the first letter of the last word.
     *
     * Example: "John Doe" => "JD"
     */
    initials?: string;
};
type AvatarProps = React$1.ComponentPropsWithoutRef<typeof Primitive.Image> & BaseAvatarProps & AvatarVariantProps;
declare const Avatar: React$1.ForwardRefExoticComponent<Omit<Primitive.AvatarImageProps & React$1.RefAttributes<HTMLImageElement>, "ref"> & BaseAvatarProps & VariantProps<(props?: ({
    status?: "gray" | "green" | "red" | "yellow" | "primary" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string> & VariantProps<(props?: ({
    notification?: "gray" | "green" | "red" | "yellow" | "primary" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string> & VariantProps<(props?: ({
    size?: "xxs" | "xs" | "sm" | "lg" | "xl" | "2xl" | "md" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string> & VariantProps<(props?: ({
    size?: "xxs" | "xs" | "sm" | "lg" | "xl" | "2xl" | "md" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string> & React$1.RefAttributes<AvatarElement>> & {
    Fallback: React$1.ForwardRefExoticComponent<Omit<Primitive.AvatarFallbackProps & React$1.RefAttributes<HTMLSpanElement>, "ref"> & React$1.RefAttributes<HTMLSpanElement>>;
    Image: React$1.ForwardRefExoticComponent<Omit<Primitive.AvatarImageProps & React$1.RefAttributes<HTMLImageElement>, "ref"> & React$1.RefAttributes<HTMLImageElement>>;
    Notification: React$1.ForwardRefExoticComponent<Omit<React$1.DetailedHTMLProps<React$1.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
        ring?: 2 | 1 | undefined;
    } & React$1.RefAttributes<HTMLSpanElement>>;
    Root: React$1.ForwardRefExoticComponent<Omit<Primitive.AvatarProps & React$1.RefAttributes<HTMLSpanElement>, "ref"> & React$1.RefAttributes<HTMLSpanElement>>;
    Status: React$1.ForwardRefExoticComponent<Omit<React$1.DetailedHTMLProps<React$1.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
        ring?: 2 | 1 | undefined;
    } & React$1.RefAttributes<HTMLSpanElement>>;
};

declare const avatarGroupVariants: (props?: ({
    size?: "xs" | "sm" | "lg" | "xl" | "2xl" | "md" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string;
type AvatarGroupAvatarProps = Omit<AvatarProps, "size" | "notification" | "status" | "asChild">;
type BaseAvatarGroupProps = {
    /**
     * The items to display in the group.
     */
    items: AvatarGroupAvatarProps[];
    /**
     * The label to display at the end of the group.
     */
    moreLabel?: React$1.ReactNode;
    /**
     * Whether the previous item should be on top of the stack.
     * If false, the next item will be at the top of the stack.
     */
    previousOnTop?: boolean;
};
type AvatarGroupElement = React$1.ElementRef<typeof AvatarGroupRoot> | null;
type AvatarGroupProps = Omit<React$1.ComponentPropsWithoutRef<"div">, "size"> & BaseAvatarGroupProps & VariantProps<typeof avatarGroupVariants>;
declare const AvatarGroupRoot: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & React$1.RefAttributes<HTMLDivElement>>;
declare const AvatarGroup: React$1.ForwardRefExoticComponent<Omit<Omit<React$1.DetailedHTMLProps<React$1.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref">, "size"> & BaseAvatarGroupProps & VariantProps<(props?: ({
    size?: "xs" | "sm" | "lg" | "xl" | "2xl" | "md" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string> & React$1.RefAttributes<HTMLDivElement>> & {
    Root: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & React$1.RefAttributes<HTMLDivElement>>;
    Item: React$1.ForwardRefExoticComponent<Omit<Omit<Primitive.AvatarImageProps & React$1.RefAttributes<HTMLImageElement>, "ref"> & {
        initials?: string | undefined;
    } & VariantProps<(props?: ({
        status?: "gray" | "green" | "red" | "yellow" | "primary" | undefined;
    } & ({
        class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined;
        className?: undefined;
    } | {
        class?: undefined;
        className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined;
    })) | undefined) => string> & VariantProps<(props?: ({
        notification?: "gray" | "green" | "red" | "yellow" | "primary" | undefined;
    } & ({
        class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined;
        className?: undefined;
    } | {
        class?: undefined;
        className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined;
    })) | undefined) => string> & VariantProps<(props?: ({
        size?: "xxs" | "xs" | "sm" | "lg" | "xl" | "2xl" | "md" | undefined;
    } & ({
        class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined;
        className?: undefined;
    } | {
        class?: undefined;
        className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined;
    })) | undefined) => string> & VariantProps<(props?: ({
        size?: "xxs" | "xs" | "sm" | "lg" | "xl" | "2xl" | "md" | undefined;
    } & ({
        class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined;
        className?: undefined;
    } | {
        class?: undefined;
        className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined;
    })) | undefined) => string> & React$1.RefAttributes<AvatarElement>, "ref"> & React$1.RefAttributes<AvatarElement>>;
    Label: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & {
        /**
         * The label to display.
         */
        label?: React$1.ReactNode;
        /**
         * The size of the element.
         */
        size?: AvatarProps["size"];
    } & React$1.RefAttributes<AvatarElement>>;
};

declare const badgeVariants: (props?: ({
    size?: "sm" | "md" | undefined;
    color?: "blue" | "gray" | "green" | "orange" | "pink" | "purple" | "red" | "yellow" | "primary" | undefined;
    shape?: "rounded" | "pill" | undefined;
    stroke?: boolean | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string;

type BaseBadgeProps = {
    /**
     * Whether the badge has border or not.
     */
    stroke?: boolean;
    /**
     * The slot to be rendered before the label.
     */
    before?: React$1.ReactElement<HTMLElement>;
    /**
     * The slot to be rendered after the label.
     */
    after?: React$1.ReactElement<HTMLElement>;
};
type BadgeProps = Omit<React$1.HTMLAttributes<HTMLSpanElement>, "size"> & VariantProps<typeof badgeVariants> & BaseBadgeProps;
type BadgeElement = HTMLSpanElement;
declare const Badge: React$1.ForwardRefExoticComponent<Omit<React$1.HTMLAttributes<HTMLSpanElement>, "size"> & VariantProps<(props?: ({
    size?: "sm" | "md" | undefined;
    color?: "blue" | "gray" | "green" | "orange" | "pink" | "purple" | "red" | "yellow" | "primary" | undefined;
    shape?: "rounded" | "pill" | undefined;
    stroke?: boolean | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string> & BaseBadgeProps & React$1.RefAttributes<HTMLSpanElement>>;

declare const buttonVariants: (props?: ({
    size?: "sm" | "md" | "xs-icon" | undefined;
    shape?: "rounded" | "pill" | undefined;
    variant?: "link" | "primary" | "secondary" | "tertiary" | "outline" | "transparent" | undefined;
    destructive?: boolean | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string;

type ButtonProps = React$1.ButtonHTMLAttributes<HTMLButtonElement> & VariantProps<typeof buttonVariants> & {
    /**
     * If set to `true`, the button will be rendered as a child within the component.
     * This child component must be a valid React component.
     */
    asChild?: boolean;
    /**
     * Does the button only contains an icon?
     * If `true`, the button will be rendered with matching padding.
     */
    isIconOnly?: boolean;
    /**
     * The slot to be rendered before the label.
     */
    before?: React$1.ReactElement<HTMLElement>;
    /**
     * The slot to be rendered after the label.
     */
    after?: React$1.ReactElement<HTMLElement>;
    /**
     * Specifies whether this button has a destructive action.
     * If `true`, the button should be styled differently to indicate that it will perform a destructive action.
     */
    destructive?: boolean;
};
type ButtonElement = HTMLButtonElement;
declare const Button: React$1.ForwardRefExoticComponent<React$1.ButtonHTMLAttributes<HTMLButtonElement> & VariantProps<(props?: ({
    size?: "sm" | "md" | "xs-icon" | undefined;
    shape?: "rounded" | "pill" | undefined;
    variant?: "link" | "primary" | "secondary" | "tertiary" | "outline" | "transparent" | undefined;
    destructive?: boolean | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string> & {
    /**
     * If set to `true`, the button will be rendered as a child within the component.
     * This child component must be a valid React component.
     */
    asChild?: boolean | undefined;
    /**
     * Does the button only contains an icon?
     * If `true`, the button will be rendered with matching padding.
     */
    isIconOnly?: boolean | undefined;
    /**
     * The slot to be rendered before the label.
     */
    before?: React$1.ReactElement<HTMLElement, string | React$1.JSXElementConstructor<any>> | undefined;
    /**
     * The slot to be rendered after the label.
     */
    after?: React$1.ReactElement<HTMLElement, string | React$1.JSXElementConstructor<any>> | undefined;
    /**
     * Specifies whether this button has a destructive action.
     * If `true`, the button should be styled differently to indicate that it will perform a destructive action.
     */
    destructive?: boolean | undefined;
} & React$1.RefAttributes<HTMLButtonElement>>;

type ButtonGroupProps = React$1.HTMLAttributes<HTMLDivElement> & {
    /**
     * The size of the buttons in group.
     */
    size?: "sm" | "md";
    /**
     * Disable all actions on buttons within this group.
     */
    disabled?: boolean;
    /**
     * Orientation of the group.
     */
    orientation?: "horizontal" | "vertical";
};
type ButtonGroupElement = HTMLDivElement;
type ButtonGroupItemProps = Omit<React$1.ComponentPropsWithoutRef<typeof Button>, "variant" | "shape" | "size">;
declare const ButtonGroup: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & {
    /**
     * The size of the buttons in group.
     */
    size?: "sm" | "md" | undefined;
    /**
     * Disable all actions on buttons within this group.
     */
    disabled?: boolean | undefined;
    /**
     * Orientation of the group.
     */
    orientation?: "horizontal" | "vertical" | undefined;
} & React$1.RefAttributes<HTMLDivElement>> & {
    Root: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & {
        /**
         * The size of the buttons in group.
         */
        size?: "sm" | "md" | undefined;
        /**
         * Disable all actions on buttons within this group.
         */
        disabled?: boolean | undefined;
        /**
         * Orientation of the group.
         */
        orientation?: "horizontal" | "vertical" | undefined;
    } & React$1.RefAttributes<HTMLDivElement>>;
    Item: React$1.ForwardRefExoticComponent<ButtonGroupItemProps & React$1.RefAttributes<HTMLButtonElement>>;
};

type LabelElement = React$1.ElementRef<typeof _radix_ui_react_label.Root>;
type LabelProps = React$1.ComponentPropsWithoutRef<typeof _radix_ui_react_label.Root> & {
    /** Tooltip text to display when hovering over the label */
    tooltip?: React$1.ReactNode;
    /** Additional description text, shown next to the primary label */
    description?: React$1.ReactNode;
    /** Indicates if the label is associated with a required field */
    required?: boolean;
    /** Indicates if the label is associated with a disabled field */
    disabled?: boolean;
};
declare const Label: React$1.ForwardRefExoticComponent<Omit<_radix_ui_react_label.LabelProps & React$1.RefAttributes<HTMLLabelElement>, "ref"> & {
    /** Tooltip text to display when hovering over the label */
    tooltip?: React$1.ReactNode;
    /** Additional description text, shown next to the primary label */
    description?: React$1.ReactNode;
    /** Indicates if the label is associated with a required field */
    required?: boolean | undefined;
    /** Indicates if the label is associated with a disabled field */
    disabled?: boolean | undefined;
} & React$1.RefAttributes<HTMLLabelElement>> & {
    Helper: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLSpanElement> & {
        error?: boolean | undefined;
        disabled?: boolean | undefined;
    } & React$1.RefAttributes<HTMLSpanElement>>;
};

type LabelHelperProps = {
    /**
     * Main label displayed above radio buttons. It can be a string, element, or any other
     * renderable node.
     */
    label?: React.ReactNode;
    /**
     * Additional text or information to guide the user. This can be an instruction,
     * a hint, or any other supplementary information. It's rendered below label.
     */
    helperText?: React.ReactNode;
    /**
     * Tooltip displayed next to the label. It can be a string, element, or any other
     * renderable node.
     */
    tooltip?: React.ReactNode;
};

type CheckboxElement = React$1.ElementRef<typeof CheckboxPrimitive.Root>;
type CheckboxElementProps = React$1.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root> & LabelProps & LabelHelperProps & {
    isIndeterminate?: boolean;
};
declare const Checkbox: React$1.ForwardRefExoticComponent<Omit<CheckboxPrimitive.CheckboxProps & React$1.RefAttributes<HTMLButtonElement>, "ref"> & Omit<_radix_ui_react_label.LabelProps & React$1.RefAttributes<HTMLLabelElement>, "ref"> & {
    tooltip?: React$1.ReactNode;
    description?: React$1.ReactNode;
    required?: boolean | undefined;
    disabled?: boolean | undefined;
} & LabelHelperProps & {
    isIndeterminate?: boolean | undefined;
} & React$1.RefAttributes<HTMLButtonElement>> & {
    Root: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & {
        asChild?: boolean | undefined;
    } & React$1.RefAttributes<HTMLDivElement>>;
    Item: React$1.ForwardRefExoticComponent<Omit<CheckboxPrimitive.CheckboxProps & React$1.RefAttributes<HTMLButtonElement>, "ref"> & Omit<_radix_ui_react_label.LabelProps & React$1.RefAttributes<HTMLLabelElement>, "ref"> & {
        tooltip?: React$1.ReactNode;
        description?: React$1.ReactNode;
        required?: boolean | undefined;
        disabled?: boolean | undefined;
    } & LabelHelperProps & {
        isIndeterminate?: boolean | undefined;
    } & React$1.RefAttributes<HTMLButtonElement>>;
};

type CheckboxGroupElement = HTMLDivElement;
type CheckboxGroupProps = React$1.HTMLAttributes<HTMLDivElement> & LabelProps & LabelHelperProps & {
    orientation?: "horizontal" | "vertical";
};
declare const CheckboxGroup: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & Omit<_radix_ui_react_label.LabelProps & React$1.RefAttributes<HTMLLabelElement>, "ref"> & {
    tooltip?: React$1.ReactNode;
    description?: React$1.ReactNode;
    required?: boolean | undefined;
    disabled?: boolean | undefined;
} & LabelHelperProps & {
    orientation?: "horizontal" | "vertical" | undefined;
} & React$1.RefAttributes<HTMLDivElement>> & {
    Root: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & Omit<_radix_ui_react_label.LabelProps & React$1.RefAttributes<HTMLLabelElement>, "ref"> & {
        tooltip?: React$1.ReactNode;
        description?: React$1.ReactNode;
        required?: boolean | undefined;
        disabled?: boolean | undefined;
    } & LabelHelperProps & {
        orientation?: "horizontal" | "vertical" | undefined;
    } & React$1.RefAttributes<HTMLDivElement>>;
    Item: React$1.ForwardRefExoticComponent<Omit<CheckboxPrimitive.CheckboxProps & React$1.RefAttributes<HTMLButtonElement>, "ref"> & Omit<_radix_ui_react_label.LabelProps & React$1.RefAttributes<HTMLLabelElement>, "ref"> & {
        tooltip?: React$1.ReactNode;
        description?: React$1.ReactNode;
        required?: boolean | undefined;
        disabled?: boolean | undefined;
    } & LabelHelperProps & {
        isIndeterminate?: boolean | undefined;
    } & React$1.RefAttributes<HTMLButtonElement>>;
};

type KbdKey = "command" | "shift" | "ctrl" | "option" | "enter" | "delete" | "escape" | "tab" | "capslock" | "up" | "right" | "down" | "left" | "pageup" | "pagedown" | "home" | "end" | "help" | "space";

declare const kbdVariants: (props?: ({
    size?: "xs" | "sm" | "lg" | "md" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string;
type KbdElement = React$1.ElementRef<"kbd">;
type KbdProps = Omit<React$1.HTMLAttributes<KbdElement>, "size"> & VariantProps<typeof kbdVariants> & {
    keys?: KbdKey | KbdKey[];
};
declare const Kbd: React$1.ForwardRefExoticComponent<Omit<React$1.HTMLAttributes<HTMLElement>, "size"> & VariantProps<(props?: ({
    size?: "xs" | "sm" | "lg" | "md" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string> & {
    keys?: KbdKey | KbdKey[] | undefined;
} & React$1.RefAttributes<HTMLElement>>;

type DropdownMenuElement = React$1.ElementRef<typeof DropdownMenuPrimitive.Root>;
type DropdownMenuProps = React$1.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Root>;
declare const DropdownMenu: React$1.FC<DropdownMenuPrimitive.DropdownMenuProps> & {
    Content: React$1.ForwardRefExoticComponent<Omit<DropdownMenuPrimitive.DropdownMenuContentProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
        inset?: boolean | undefined;
    } & React$1.RefAttributes<HTMLDivElement>>;
    Group: React$1.ForwardRefExoticComponent<DropdownMenuPrimitive.DropdownMenuGroupProps & React$1.RefAttributes<HTMLDivElement>>;
    Item: React$1.ForwardRefExoticComponent<Omit<DropdownMenuPrimitive.DropdownMenuItemProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
        inset?: boolean | undefined;
        destructive?: boolean | undefined;
    } & React$1.RefAttributes<HTMLDivElement>>;
    Label: React$1.ForwardRefExoticComponent<Omit<DropdownMenuPrimitive.DropdownMenuLabelProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
        inset?: boolean | undefined;
    } & React$1.RefAttributes<HTMLDivElement>>;
    Portal: React$1.FC<DropdownMenuPrimitive.DropdownMenuPortalProps>;
    RadioGroup: React$1.ForwardRefExoticComponent<DropdownMenuPrimitive.DropdownMenuRadioGroupProps & React$1.RefAttributes<HTMLDivElement>>;
    Separator: React$1.ForwardRefExoticComponent<Omit<DropdownMenuPrimitive.DropdownMenuSeparatorProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
    SubTrigger: React$1.ForwardRefExoticComponent<Omit<DropdownMenuPrimitive.DropdownMenuSubTriggerProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
        inset?: boolean | undefined;
    } & React$1.RefAttributes<HTMLDivElement>>;
    SubContent: React$1.ForwardRefExoticComponent<Omit<DropdownMenuPrimitive.DropdownMenuSubContentProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
        inset?: boolean | undefined;
    } & React$1.RefAttributes<HTMLDivElement>>;
    CheckboxItem: React$1.ForwardRefExoticComponent<Omit<DropdownMenuPrimitive.DropdownMenuCheckboxItemProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
        destructive?: boolean | undefined;
    } & React$1.RefAttributes<HTMLDivElement>>;
    RadioItem: React$1.ForwardRefExoticComponent<Omit<DropdownMenuPrimitive.DropdownMenuRadioItemProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
        destructive?: boolean | undefined;
    } & React$1.RefAttributes<HTMLDivElement>>;
    Shortcut: React$1.ForwardRefExoticComponent<Omit<React$1.HTMLAttributes<HTMLElement>, "size"> & cva.VariantProps<(props?: ({
        size?: "xs" | "sm" | "lg" | "md" | undefined;
    } & ({
        class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined;
        className?: undefined;
    } | {
        class?: undefined;
        className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined;
    })) | undefined) => string> & {
        keys?: KbdKey | KbdKey[] | undefined;
    } & React$1.RefAttributes<HTMLElement>>;
    Sub: React$1.FC<DropdownMenuPrimitive.DropdownMenuSubProps>;
    Trigger: React$1.ForwardRefExoticComponent<DropdownMenuPrimitive.DropdownMenuTriggerProps & React$1.RefAttributes<HTMLButtonElement>>;
};

type InputElement = HTMLInputElement;
type InputProps = React$1.InputHTMLAttributes<HTMLInputElement> & LabelProps & LabelHelperProps & {
    destructive?: boolean;
};
declare const Input: React$1.ForwardRefExoticComponent<React$1.InputHTMLAttributes<HTMLInputElement> & Omit<_radix_ui_react_label.LabelProps & React$1.RefAttributes<HTMLLabelElement>, "ref"> & {
    tooltip?: React$1.ReactNode;
    description?: React$1.ReactNode;
    required?: boolean | undefined;
    disabled?: boolean | undefined;
} & LabelHelperProps & {
    destructive?: boolean | undefined;
} & React$1.RefAttributes<HTMLInputElement>>;

type LoadingElement = HTMLDivElement;
type LoadingProps = React$1.HTMLAttributes<HTMLDivElement> & VariantProps<typeof loadingVariants>;
declare const loadingVariants: (props?: ({
    color?: "primary" | "secondary" | undefined;
    size?: "xxs" | "xs" | "sm" | "lg" | "xl" | "md" | "xxl" | undefined;
    type?: "line" | "spinner" | "dots" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string;
declare const Loading: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & VariantProps<(props?: ({
    color?: "primary" | "secondary" | undefined;
    size?: "xxs" | "xs" | "sm" | "lg" | "xl" | "md" | "xxl" | undefined;
    type?: "line" | "spinner" | "dots" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string> & React$1.RefAttributes<HTMLDivElement>>;

type PopoverElement = React$1.ElementRef<typeof PopoverPrimitive.Root>;
type PopoverProps = React$1.ComponentProps<typeof PopoverPrimitive.Root>;
declare const Popover: React$1.FC<PopoverPrimitive.PopoverProps> & {
    Trigger: React$1.ForwardRefExoticComponent<PopoverPrimitive.PopoverTriggerProps & React$1.RefAttributes<HTMLButtonElement>>;
    Content: React$1.ForwardRefExoticComponent<Omit<PopoverPrimitive.PopoverContentProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
    Portal: React$1.FC<PopoverPrimitive.PopoverPortalProps>;
    Anchor: React$1.ForwardRefExoticComponent<PopoverPrimitive.PopoverAnchorProps & React$1.RefAttributes<HTMLDivElement>>;
    Arrow: React$1.ForwardRefExoticComponent<PopoverPrimitive.PopoverArrowProps & React$1.RefAttributes<SVGSVGElement>>;
    Close: React$1.ForwardRefExoticComponent<PopoverPrimitive.PopoverCloseProps & React$1.RefAttributes<HTMLButtonElement>>;
};

declare const progressBarVariants: (props?: ({
    variant?: "inline" | "default" | undefined;
    color?: "blue" | "green" | "orange" | "pink" | "purple" | "red" | "yellow" | "primary" | "secondary" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string;
type ProgressBarElement = React$1.ElementRef<typeof ProgressPrimitive.Root>;
type ProgressBarProps = React$1.ComponentProps<typeof ProgressPrimitive.Root> & Omit<LabelProps, "required"> & LabelHelperProps & {
    /**
     * The indicator to be rendered to the right of the progress bar.
     */
    indicator?: React$1.ReactNode;
    /**
     * The slot to be rendered after the indicator.
     */
    afterIndicator?: React$1.ReactNode;
    /**
     * If `true`, the progress bar CSS transition will be disabled.
     */
    disableAnimation?: boolean;
} & VariantProps<typeof progressBarVariants>;
declare const ProgressBar: React$1.ForwardRefExoticComponent<Omit<ProgressBarProps, "ref"> & React$1.RefAttributes<HTMLDivElement>>;

declare const progressCircleVariants: (props?: ({
    size?: "xs" | "sm" | "lg" | "xl" | "md" | undefined;
    color?: "blue" | "green" | "orange" | "pink" | "purple" | "red" | "yellow" | "primary" | "secondary" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string;
type ProgressCircleElement = SVGSVGElement;
type ProgressCircleProps = Omit<React$1.SVGProps<SVGSVGElement>, "value"> & VariantProps<typeof progressCircleVariants> & {
    /**
     * The progress value.
     */
    value?: number;
    /**
     * The maximum progress value.
     */
    max?: number;
    /**
     * A function to get the accessible label text representing the current value in a human-readable format.
     * If not provided, the value label will be read as the numeric value as a percentage of the max value.
     */
    getLabelValue?: (value: number, max: number) => string;
    /**
     * If `true`, the additional styles will be applied to indicate that the progress bar is disabled.
     */
    disabled?: boolean;
    /**
     * If `true`, the progress bar CSS transition will be disabled.
     */
    disableAnimation?: boolean;
};
declare const ProgressCircle: React$1.ForwardRefExoticComponent<Omit<ProgressCircleProps, "ref"> & React$1.RefAttributes<SVGSVGElement>>;

type RadioGroupElement = React$1.ElementRef<typeof RadioGroupPrimitive.Root>;
type RadioGroupProps = React$1.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root> & LabelProps & LabelHelperProps;
type RadioGroupItemPropsBase = React$1.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item> & LabelProps & Omit<LabelHelperProps, "label">;
type WithChildren = {
    children: React$1.ReactNode;
    label?: React$1.ReactNode;
};
type WithoutChildren = {
    children?: never;
    label: React$1.ReactNode;
};
type RadioGroupItemProps = RadioGroupItemPropsBase & (WithChildren | WithoutChildren);
declare const RadioGroup: React$1.ForwardRefExoticComponent<Omit<RadioGroupPrimitive.RadioGroupProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & Omit<_radix_ui_react_label.LabelProps & React$1.RefAttributes<HTMLLabelElement>, "ref"> & {
    tooltip?: React$1.ReactNode;
    description?: React$1.ReactNode;
    required?: boolean | undefined;
    disabled?: boolean | undefined;
} & LabelHelperProps & React$1.RefAttributes<HTMLDivElement>> & {
    Root: React$1.ForwardRefExoticComponent<RadioGroupPrimitive.RadioGroupProps & React$1.RefAttributes<HTMLDivElement>>;
    Item: React$1.ForwardRefExoticComponent<RadioGroupItemProps & React$1.RefAttributes<HTMLButtonElement>>;
};

type SliderWedgesElement = React$1.ElementRef<typeof SliderPrimitive.Root>;
type SliderWedgesProps = Omit<React$1.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>, "asChild"> & {
    /**
     * The slot to be rendered after the slider.
     */
    after?: React$1.ReactNode;
    /**
     * The slot to be rendered before the slider.
     */
    before?: React$1.ReactNode;
    /**
     * Should tooltip be shown always, when hoverign, or never.
     */
    showTooltip?: "always" | "hover" | "never";
    /**
     * Tooltip render function.
     */
    renderTooltip?: (value: number) => string;
    label?: React$1.ReactNode;
    tooltip?: React$1.ReactNode;
    description?: React$1.ReactNode;
    disabled?: boolean;
    helperText?: React$1.ReactNode;
    required?: boolean;
};
declare const Slider: React$1.ForwardRefExoticComponent<Omit<Omit<SliderPrimitive.SliderProps & React$1.RefAttributes<HTMLSpanElement>, "ref">, "asChild"> & {
    /**
     * The slot to be rendered after the slider.
     */
    after?: React$1.ReactNode;
    /**
     * The slot to be rendered before the slider.
     */
    before?: React$1.ReactNode;
    /**
     * Should tooltip be shown always, when hoverign, or never.
     */
    showTooltip?: "always" | "never" | "hover" | undefined;
    /**
     * Tooltip render function.
     */
    renderTooltip?: ((value: number) => string) | undefined;
    label?: React$1.ReactNode;
    tooltip?: React$1.ReactNode;
    description?: React$1.ReactNode;
    disabled?: boolean | undefined;
    helperText?: React$1.ReactNode;
    required?: boolean | undefined;
} & React$1.RefAttributes<HTMLSpanElement>> & {
    Root: React$1.ForwardRefExoticComponent<Omit<SliderPrimitive.SliderProps & React$1.RefAttributes<HTMLSpanElement>, "ref"> & React$1.RefAttributes<HTMLSpanElement>>;
    Track: React$1.ForwardRefExoticComponent<Omit<SliderPrimitive.SliderTrackProps & React$1.RefAttributes<HTMLSpanElement>, "ref"> & React$1.RefAttributes<HTMLSpanElement>>;
    Range: React$1.ForwardRefExoticComponent<Omit<SliderPrimitive.SliderRangeProps & React$1.RefAttributes<HTMLSpanElement>, "ref"> & React$1.RefAttributes<HTMLSpanElement>>;
    Thumb: React$1.ForwardRefExoticComponent<Omit<SliderPrimitive.SliderThumbProps & React$1.RefAttributes<HTMLSpanElement>, "ref"> & {
        currentValue?: number | undefined;
        tooltip?: string | boolean | undefined;
        showTooltip?: "always" | "never" | "hover" | undefined;
        orientation?: "horizontal" | "vertical" | undefined;
    } & React$1.RefAttributes<HTMLSpanElement>>;
};

type HasLabel = {
    /**
     * Label displayed next to the switch. It can be a string, element, or any other
     * renderable node.
     */
    label: React$1.ReactNode;
    /**
     * Alignment of the labels: "start" (usually left) or "end" (usually right).
     */
    alignLabel?: "start" | "end";
};
type HasNoLabel = {
    label?: never;
    /**
     * Alignment of the labels: "start" (usually left) or "end" (usually right).
     */
    alignLabel?: never;
};
type SwitchElement = React$1.ElementRef<typeof SwitchPrimitive.Root>;
type SwitchProps = React$1.ComponentPropsWithoutRef<typeof SwitchPrimitive.Root> & LabelProps & Omit<LabelHelperProps, "label"> & (HasLabel | HasNoLabel);
declare const Switch: React$1.ForwardRefExoticComponent<SwitchProps & React$1.RefAttributes<HTMLButtonElement>>;

type SwitchGroupElement = HTMLDivElement;
type SwitchGroupProps = React$1.HTMLAttributes<HTMLDivElement> & LabelProps & LabelHelperProps & {
    /**
     * Alignment of the labels: "start" (usually left) or "end" (usually right).
     * @default "end"
     */
    alignLabels?: "start" | "end";
};
type SwitchGroupItemProps = Omit<SwitchProps, "alignLabel">;
declare const SwitchGroup: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & Omit<_radix_ui_react_label.LabelProps & React$1.RefAttributes<HTMLLabelElement>, "ref"> & {
    tooltip?: React$1.ReactNode;
    description?: React$1.ReactNode;
    required?: boolean | undefined;
    disabled?: boolean | undefined;
} & LabelHelperProps & {
    /**
     * Alignment of the labels: "start" (usually left) or "end" (usually right).
     * @default "end"
     */
    alignLabels?: "end" | "start" | undefined;
} & React$1.RefAttributes<HTMLDivElement>> & {
    Root: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & Omit<_radix_ui_react_label.LabelProps & React$1.RefAttributes<HTMLLabelElement>, "ref"> & {
        tooltip?: React$1.ReactNode;
        description?: React$1.ReactNode;
        required?: boolean | undefined;
        disabled?: boolean | undefined;
    } & LabelHelperProps & {
        /**
         * Alignment of the labels: "start" (usually left) or "end" (usually right).
         * @default "end"
         */
        alignLabels?: "end" | "start" | undefined;
    } & React$1.RefAttributes<HTMLDivElement>>;
    Item: React$1.ForwardRefExoticComponent<SwitchGroupItemProps & React$1.RefAttributes<HTMLButtonElement>>;
};

declare const tabVariants: (props?: ({
    variant?: "fill" | "underlined" | "contained-bottom" | "contained-top" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string;

type TabsElement = React$1.ElementRef<typeof TabsPrimitive.Root>;
type TabsProps = React$1.ComponentPropsWithoutRef<typeof TabsPrimitive.Root> & VariantProps<typeof tabVariants>;
declare const Tabs: React$1.ForwardRefExoticComponent<Omit<TabsPrimitive.TabsProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & VariantProps<(props?: ({
    variant?: "fill" | "underlined" | "contained-bottom" | "contained-top" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string> & React$1.RefAttributes<HTMLDivElement>> & {
    Root: React$1.ForwardRefExoticComponent<Omit<TabsPrimitive.TabsProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & VariantProps<(props?: ({
        variant?: "fill" | "underlined" | "contained-bottom" | "contained-top" | undefined;
    } & ({
        class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined;
        className?: undefined;
    } | {
        class?: undefined;
        className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined)[] | {
            [x: string]: any;
        } | null | undefined;
    })) | undefined) => string> & React$1.RefAttributes<HTMLDivElement>>;
    List: React$1.ForwardRefExoticComponent<Omit<TabsPrimitive.TabsListProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
        /**
         * Should the tabs stretch to fill the available space?
         */
        stretch?: boolean | undefined;
    } & React$1.RefAttributes<HTMLDivElement>>;
    Trigger: React$1.ForwardRefExoticComponent<Omit<TabsPrimitive.TabsTriggerProps & React$1.RefAttributes<HTMLButtonElement>, "ref"> & {
        /**
         * The slot to be rendered before the trigger label.
         */
        before?: React$1.ReactElement<HTMLElement, string | React$1.JSXElementConstructor<any>> | undefined;
        /**
         * The slot to be rendered after the trigger label.
         */
        after?: React$1.ReactElement<HTMLElement, string | React$1.JSXElementConstructor<any>> | undefined;
    } & React$1.RefAttributes<HTMLButtonElement>>;
    Content: React$1.ForwardRefExoticComponent<Omit<TabsPrimitive.TabsContentProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
};

type ClosableProps = {
    /**
     * Is the alert closable? If true, a close icon will be displayed.
     * @default true
     */
    closable: true;
    /**
     * An optional callback function to be called when the close icon is clicked.
     * This can be used to handle the removal of the tag.
     * If provided, the close icon will be displayed.
     */
    onClose?: React$1.MouseEventHandler<HTMLButtonElement>;
};
type NotClosableProps = {
    /**
     * Is the alert closable? If true, a close icon will be displayed.
     * @default true
     */
    closable?: false;
    /**
     * An optional callback function to be called when the close icon is clicked.
     * This can be used to handle the removal of the tag.
     * If provided, the close icon will be displayed.
     */
    onClose?: never;
};
type TagProps = React$1.ComponentPropsWithoutRef<typeof Badge> & {
    /**
     * An optional avatar to display within the tag.
     * Expects Avatar component.
     *
     * @example
     * // Display a tag with an avatar
     * <Tag avatar={<Avatar src="..." />} />
     */
    avatar?: React$1.ReactElement<typeof Avatar>;
    /**
     * An optional element to display before the tag content.
     * This can be used to display an icon or other element.
     */
    /**
     * Specify alternative close icon to display within the tag
     *
     * * @example
     * // Display a tag with an avatar
     * <Tag closeIcon={<TrashIcon />} />.
     */
    closeIcon?: React$1.ReactElement<HTMLElement>;
} & (ClosableProps | NotClosableProps);
declare const Tag: React$1.ForwardRefExoticComponent<TagProps & React$1.RefAttributes<HTMLSpanElement>>;

type TextareaElement = HTMLTextAreaElement;
type TextareaProps = React$1.TextareaHTMLAttributes<HTMLTextAreaElement> & LabelProps & LabelHelperProps & {
    destructive?: boolean;
};
declare const Textarea: React$1.ForwardRefExoticComponent<React$1.TextareaHTMLAttributes<HTMLTextAreaElement> & Omit<_radix_ui_react_label.LabelProps & React$1.RefAttributes<HTMLLabelElement>, "ref"> & {
    tooltip?: React$1.ReactNode;
    description?: React$1.ReactNode;
    required?: boolean | undefined;
    disabled?: boolean | undefined;
} & LabelHelperProps & {
    destructive?: boolean | undefined;
} & React$1.RefAttributes<HTMLTextAreaElement>>;

type ToggleElement = React$1.ElementRef<typeof TogglePrimitive.Root>;
type ToggleProps = React$1.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> & Omit<ButtonProps, "variant"> & {
    variant?: "outline" | "transparent";
};
declare const Toggle: React$1.ForwardRefExoticComponent<Omit<TogglePrimitive.ToggleProps & React$1.RefAttributes<HTMLButtonElement>, "ref"> & Omit<ButtonProps, "variant"> & {
    variant?: "outline" | "transparent" | undefined;
} & React$1.RefAttributes<HTMLButtonElement>>;

type ToggleGroupElement = React$1.ElementRef<typeof ToggleGroupPrimitive.Root>;
type ToggleGroupProps = React$1.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> & {
    /**
     * The size of the buttons in group.
     */
    size?: "sm" | "md";
};
declare const ToggleGroup: React$1.ForwardRefExoticComponent<ToggleGroupProps & React$1.RefAttributes<HTMLDivElement>> & {
    Root: React$1.ForwardRefExoticComponent<ToggleGroupProps & React$1.RefAttributes<HTMLDivElement>>;
    Item: React$1.ForwardRefExoticComponent<Omit<ToggleGroupPrimitive.ToggleGroupItemProps & React$1.RefAttributes<HTMLButtonElement>, "ref"> & Omit<Omit<Omit<TogglePrimitive.ToggleProps & React$1.RefAttributes<HTMLButtonElement>, "ref"> & Omit<ButtonProps, "variant"> & {
        variant?: "outline" | "transparent" | undefined;
    } & React$1.RefAttributes<HTMLButtonElement>, "ref">, "size" | "shape" | "variant"> & React$1.RefAttributes<HTMLButtonElement>>;
};

declare const tooltipVariant: (props?: ({
    size?: "sm" | "md" | undefined;
    color?: "primary" | "secondary" | "soft" | undefined;
} & ({
    class?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
    className?: undefined;
} | {
    class?: undefined;
    className?: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined)[] | {
        [x: string]: any;
    } | null | undefined;
})) | undefined) => string;
type TooltipContentProps = Omit<React$1.ComponentPropsWithRef<typeof TooltipPrimitive.Content>, "content"> & {
    /**
     * Whether to animate the tooltip when it opens/closes
     */
    animation?: boolean;
    /**
     * Whether to show an arrow pointing to the target element
     */
    arrow?: boolean;
    /**
     * The content to display inside the tooltip
     */
    content: React$1.ReactNode;
} & VariantProps<typeof tooltipVariant>;
type TooltipProps = React$1.ComponentPropsWithoutRef<typeof TooltipPrimitive.Root> & TooltipContentProps;
declare const Tooltip: React$1.ForwardRefExoticComponent<Omit<TooltipProps, "ref"> & React$1.RefAttributes<HTMLDivElement>> & {
    Arrow: React$1.ForwardRefExoticComponent<Omit<TooltipPrimitive.TooltipArrowProps & React$1.RefAttributes<SVGSVGElement>, "ref"> & React$1.RefAttributes<SVGSVGElement>>;
    Content: React$1.ForwardRefExoticComponent<Omit<TooltipContentProps, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
    Portal: React$1.FC<TooltipPrimitive.TooltipPortalProps>;
    Provider: React$1.ForwardRefExoticComponent<TooltipPrimitive.TooltipProviderProps & React$1.RefAttributes<never>>;
    Root: React$1.ForwardRefExoticComponent<TooltipPrimitive.TooltipProps & React$1.RefAttributes<never>>;
    Trigger: React$1.ForwardRefExoticComponent<Omit<TooltipPrimitive.TooltipTriggerProps & React$1.RefAttributes<HTMLButtonElement>, "ref"> & React$1.RefAttributes<HTMLButtonElement>>;
};

type ColorScale = {
    50: string;
    100: string;
    200: string;
    300: string;
    400: string;
    500: string;
    600: string;
    700: string;
    800: string;
    900: string;
    DEFAULT: string;
};
type ThemableColorScale = Partial<ColorScale> | string;
type ThemableColors = {
    background: string;
    foreground: string;
    primary: ThemableColorScale;
    secondary: ThemableColorScale;
    surface: ThemableColorScale;
    destructive: ThemableColorScale;
};

declare const palette: {
    readonly white: {
        readonly 50: "rgba(255,255,255, 0.05)";
        readonly 100: "rgba(255,255,255, 0.1)";
        readonly 200: "rgba(255,255,255, 0.2)";
        readonly 300: "rgba(255,255,255, 0.3)";
        readonly 400: "rgba(255,255,255, 0.4)";
        readonly 500: "rgba(255,255,255, 0.5)";
        readonly 600: "rgba(255,255,255, 0.6)";
        readonly 700: "rgba(255,255,255, 0.8)";
        readonly 800: "rgba(255,255,255, 0.9)";
        readonly 900: "#FFFFFF";
        readonly DEFAULT: "#FFFFFF";
    };
    readonly black: {
        readonly DEFAULT: "#000000";
    };
    readonly blue: {
        50: string;
        100: string;
        200: string;
        300: string;
        400: string;
        500: string;
        600: string;
        700: string;
        800: string;
        900: string;
        DEFAULT: string;
    };
    readonly gray: {
        50: string;
        100: string;
        200: string;
        300: string;
        400: string;
        500: string;
        600: string;
        700: string;
        800: string;
        900: string;
        DEFAULT: string;
    };
    readonly green: {
        50: string;
        100: string;
        200: string;
        300: string;
        400: string;
        500: string;
        600: string;
        700: string;
        800: string;
        900: string;
        DEFAULT: string;
    };
    readonly orange: {
        50: string;
        100: string;
        200: string;
        300: string;
        400: string;
        500: string;
        600: string;
        700: string;
        800: string;
        900: string;
        DEFAULT: string;
    };
    readonly pink: {
        50: string;
        100: string;
        200: string;
        300: string;
        400: string;
        500: string;
        600: string;
        700: string;
        800: string;
        900: string;
        DEFAULT: string;
    };
    readonly purple: {
        50: string;
        100: string;
        200: string;
        300: string;
        400: string;
        500: string;
        600: string;
        700: string;
        800: string;
        900: string;
        DEFAULT: string;
    };
    readonly red: {
        50: string;
        100: string;
        200: string;
        300: string;
        400: string;
        500: string;
        600: string;
        700: string;
        800: string;
        900: string;
        DEFAULT: string;
    };
    readonly yellow: {
        50: string;
        100: string;
        200: string;
        300: string;
        400: string;
        500: string;
        600: string;
        700: string;
        800: string;
        900: string;
        DEFAULT: string;
    };
};
type WedgesPalette = typeof palette;
type PrefixedPaletteKeys = {
    [K in keyof WedgesPalette as `wg-${string & K}`]: WedgesPalette[K];
};

type ConfigTheme = {
    /**
     * Whether to extend 'dark' or 'light' default themes.
     * @default "light"
     */
    extend?: "light" | "dark";
    /**
     * Defines an extended colors object, providing a flexible foundation for theming or custom color configurations.
     *
     * Key Features:
     * 1. **Themable Colors**: Customize or extend existing themes by overriding values in the `wedgesPalette`.
     * 2. **Custom Colors**: Introduce new color schemes by adding unique key-value pairs.
     * 3. **Nested Colors**: Allows for the grouping of color variations under a single key, facilitating organized and hierarchical color definitions.
     * 4. **Prefix 'wg'**: The colors defined in `wedgesPalette` are prefixed with 'wg' to prevent conflicts with the standard Tailwind color palette, ensuring a seamless integration.
     *
     * @example
     * colors: {
     *   'wg-red': '#ff0000',
     *   customColor: {
     *     500: '#f0f0f0',
     *     600: '#0d0d0d',
     *   },
     * }
     */
    colors?: Partial<ThemableColors> | Record<string, string | Record<string, string>>;
};
type BaseThemes = "light" | "dark";
type DefaultThemeType = BaseThemes | (string & {});
type ConfigThemes = {
    [key in BaseThemes]?: ConfigTheme;
} & Record<string, ConfigTheme>;
type WedgesOptions = {
    /**
     * The prefix for CSS variables.
     * @default "wg"
     */
    prefix?: string;
    /**
     * The theme definitions.
     */
    themes?: ConfigThemes;
    /**
     * The default theme to use.
     * @default "light"
     */
    defaultTheme?: DefaultThemeType;
    /**
     * The default theme to extend. Available values are "light" and "dark".
     * @default "light"
     */
    defaultExtendTheme?: "light" | "dark";
    /**
     * Specifies whether or not to apply font anti-aliasing to Wedges components.
     *
     * If set to `antialiased` (default), Wedges components will have anti-aliasing applied to them.
     * If set to `inherit`, no specific styles will be set for text anti-aliasing.
     *
     * * @default "antialiased"
     */
    fontSmooth?: "antialiased" | "inherit";
};

/**
 * The actual plugin function.
 */
declare const wedgesTW: (config?: WedgesOptions) => ReturnType<typeof plugin>;

export { AlertWedges as Alert, type AlertProps, Avatar, type AvatarElement, AvatarGroup, type AvatarGroupElement, type AvatarGroupProps, type AvatarProps, Badge, type BadgeElement, type BadgeProps, Button, type ButtonElement, ButtonGroup, type ButtonGroupElement, type ButtonGroupProps, type ButtonProps, Checkbox, type CheckboxElement, type CheckboxElementProps, CheckboxGroup, type CheckboxGroupElement, type CheckboxGroupProps, type ColorScale, DropdownMenu, type DropdownMenuElement, type DropdownMenuProps, Input, type InputElement, type InputProps, Kbd, type KbdElement, type KbdKey, type KbdProps, Label, type LabelElement, type LabelHelperProps, type LabelProps, Loading, type LoadingElement, type LoadingProps, Popover, type PopoverElement, type PopoverProps, type PrefixedPaletteKeys, ProgressBar, type ProgressBarElement, type ProgressBarProps, ProgressCircle, type ProgressCircleElement, type ProgressCircleProps, RadioGroup, type RadioGroupElement, type RadioGroupProps, Slider, type SliderWedgesElement, type SliderWedgesProps, Switch, type SwitchElement, SwitchGroup, type SwitchGroupElement, type SwitchGroupProps, type SwitchProps, Tabs, type TabsElement, type TabsProps, Tag, type TagProps, Textarea, type TextareaElement, type TextareaProps, type ThemableColorScale, Toggle, type ToggleElement, ToggleGroup, type ToggleGroupElement, type ToggleGroupProps, type ToggleProps, Tooltip, type WedgesPalette, palette as wedgesPalette, wedgesTW };
